y <- pmin(3, pmax(-3, stats::rnorm(50)))
xhist <- hist(x, breaks = seq(-3,3,0.5), plot = FALSE)
yhist <- hist(y, breaks = seq(-3,3,0.5), plot = FALSE)
top <- max(c(xhist$counts, yhist$counts))
xrange <- c(-3, 3)
yrange <- c(-3, 3)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf
)
par(mar = c(3,3,1,1))
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
par(mar = c(0,3,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0)
par(mar = c(3,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top), space = 0, horiz = TRUE)
par(mfrow = c(2:2))
par(mfrow = c(2:3))
plot(x1,y)
plot(x2,y)
plot(x3,y)
x1 = table$x1; x2 = table$x2; x3 = table$x3; x4 = table$x4; y = table$y
par(mfrow = c(2:3))
plot(x1,y)
plot(x2,y)
plot(x3,y)
plot(x4,y)
par(mfrow = c(2:2))
table = read.table("Table14.txt", header = T)
x1 = table$x1; x2 = table$x2; x3 = table$x3; x4 = table$x4; y = table$y
par(mfrow = c(2:2))
plot(x1,y)
plot(x2,y)
plot(x3,y)
plot(x4,y)
par(mfrow=c(2,2))
plot(x1,y)
plot(x2,y)
plot(x3,y)
plot(x4,y)
plot(x1,y, col = 1)
plot(x1,y, col = 2)
plot(x2,y, col = 3)
plot(x3,y, col = 4)
plot(x4,y, col= 5)
par(mfrow=c(2,2))
plot(x1,y, col = 2)
plot(x2,y, col = 3)
plot(x3,y, col = 4)
plot(x4,y, col= 5)
plot(x4,y, col= 6)
par(mfrow=c(2,2))
plot(x1,y, col = 1)
plot(x2,y, col = 2)
plot(x3,y, col = 3)
plot(x4,y, col= 4)
par(mfrow=c(2,2))
plot(x1,y, col = 1, xlim = c(0,max(x4)))
plot(x2,y, col = 2, xlim = c(0,max(x4)))
plot(x3,y, col = 3, xlim = c(0,max(x4)))
plot(x4,y, col= 4, xlim = c(0,max(x4)))
par(mfrow=c(2,2))
plot(x1,y, col = 1, xlim = c(0,max(x4)), xlab = "x1: state gasoline tax (cents per gallon)")
plot(x2,y, col = 2, xlim = c(0,max(x4)), xlab = "x2: per capita income (1000s of dollars)")
plot(x3,y, col = 3, xlim = c(0,max(x4)), xlab = "x3: paved highways (1000s of miles)")
plot(x4,y, col= 4, xlim = c(0,max(x4)), xlab = "x4: licensed drivers per 1000 persons")
fit = lm (y ~ x1 + x2 + x3 + x4)
summary(fit)
qtukey(.95, 2, df =  2:11))
qtukey(.95, 2, df =  2:11)
qtukey(.95, 4, df =  16)
qtukey(0.05, 4, df =  16)
qtukey(0.975, 4, df =  16)
qtukey(0.95, 4, df =  16)
abs(qt(0.01/12, 16))
abs(qt(0.05/12, 16))
qtukey(0.995, 4, df =  16)
qtukey(0.95, 4, df =  16)
1/(sqrt(2))*qtukey(0.95, 4, df =  16)
1/(sqrt(2))*qtukey(0.995, 4, df =  16)
sqrt(4.2)
abs(qt(0.05/12, 16))
1/(sqrt(2))*qtukey(0.95, 4, df =  16)
abs(qt(0.01/12, 16))
#(2)Tukey:
1/(sqrt(2))*qtukey(0.99, 4, df =  16)
tij = c (-0.87, 1.85, 2.14, 2.72, 3.01, 0.29); max (tij)
abs(qt(0.01/12, 16))
#(2)Tukey:
1/(sqrt(2))*qtukey(0.99, 4, df =  16)
x = c (40, 40, 50, 50, 60, 60)
y = c (25.66, 28.00, 20.65, 29.15, 35.09, 29.79, 35.73, 39.56, 35.66)
fit = lm (y~x)
x = c (40, 40, 40, 50, 50, 50, 60, 60, 60)
y = c (25.66, 28.00, 20.65, 29.15, 35.09, 29.79, 35.73, 39.56, 35.66)
fit = lm (y~x)
x = c (40, 40, 40, 50, 50, 50, 60, 60, 60)
y = c (25.66, 28.00, 20.65, 29.15, 35.09, 29.79, 35.73, 39.56, 35.66)
m1 = lm (y~x)
#method 1: use functions in R
predict(m1, data.frame(x = 55), se.fit = TRUE)
predict(m1, data.frame(x = 55))
predict(m1, data.frame(x = 55), interval = "prediction")
N = 3*3
b0 = m1$coefficients[[1]];b0
b1 = m1$coefficients[[2]];b1
y.hat = predict(m1, data.frame(x = x))
MSE = sum ((y - y.hat)^2)/(N-2);MSE #correspond with 121.4 in ANOVA
MSE = sum ((y - y.hat)^2)/(N-2);MSE #correspond with 121.4 in ANOVA
SE = sqrt(MSE)*sqrt(1 + 1/N + (mean(x)-year[1])^2/sum((x-mean(x))^2))
x = c (40, 40, 40, 50, 50, 50, 60, 60, 60)
y = c (25.66, 28.00, 20.65, 29.15, 35.09, 29.79, 35.73, 39.56, 35.66)
m1 = lm (y~x)
N = 3*3
predict(m1, data.frame(x = 55))
predict(m1, data.frame(x = 55), interval = "prediction")
b0 = m1$coefficients[[1]];b0
b1 = m1$coefficients[[2]];b1
y.hat = predict(m1, data.frame(x = x))
MSE = sum ((y - y.hat)^2)/(N-2);MSE #correspond with 121.4 in ANOVA
SE = sqrt(MSE)*sqrt(1 + 1/N + (mean(x)-55)^2/sum((x-mean(x))^2))
t = abs(qt(0.025, N-2))
predict =  b0 + b1*55; predict
upper = b0 + b1*55 + t*SE
lower = b0 + b1*55 - t*SE
c(lower, upper) #same as the prediction function output
predict(m1, data.frame(x = 55), interval = "prediction")
predict(m1, data.frame(x = 55))
predict(m1, data.frame(x = 55), interval = "prediction")
c(lower, upper) #same as the prediction function output
predict(m1, data.frame(x = 55), interval = "prediction")
#method 2: calculate step by step
b0 = m1$coefficients[[1]];b0
b1 = m1$coefficients[[2]];b1
y.hat = predict(m1, data.frame(x = x))
MSE = sum ((y - y.hat)^2)/(N-2);MSE #correspond with 121.4 in ANOVA
SE = sqrt(MSE)*sqrt(1/N + (mean(x)-55)^2/sum((x-mean(x))^2))
t = abs(qt(0.025, N-2))
predict =  b0 + b1*55; predict
upper = b0 + b1*55 + t*SE
lower = b0 + b1*55 - t*SE
c(lower, upper) #same as the prediction function output
predict(m1, data.frame(x = 55), interval = "prediction")
#method 2: calculate step by step
b0 = m1$coefficients[[1]];b0
b1 = m1$coefficients[[2]];b1
y.hat = predict(m1, data.frame(x = x))
MSE = sum ((y - y.hat)^2)/(N-2);MSE #correspond with 121.4 in ANOVA
SE = sqrt(MSE)*sqrt(1/N + (mean(x)-55)^2/sum((x-mean(x))^2))
t = abs(qt(0.025, N-2))
predict =  b0 + b1*55; predict
upper = b0 + b1*55 + t*SE
lower = b0 + b1*55 - t*SE
c(lower, upper) #same as the prediction function output
predict(m1, data.frame(x = 55), interval = "prediction")
predict(m1, data.frame(x = 55), interval = "confidence")
predict(m1, data.frame(x = 55), interval = "confidence")
predict(m1, data.frame(x = 55), interval = "confidence")
b0 = m1$coefficients[[1]];b0
b1 = m1$coefficients[[2]];b1
y.hat = predict(m1, data.frame(x = x));
MSE = sum ((y - y.hat)^2)/(N-2);MSE #correspond with 121.4 in ANOVA
predict(m1, data.frame(x = 55), interval = "confidence")
b0 = m1$coefficients[[1]];b0
b1 = m1$coefficients[[2]];b1
y.hat = predict(m1, data.frame(x = x));
MSE = sum ((y - y.hat)^2)/(N-2);MSE #correspond with 121.4 in ANOVA
SE = sqrt(MSE)*sqrt(1/N + (mean(x)-55)^2/sum((x-mean(x))^2));
t = abs(qt(0.025, N-2));
predict =  b0 + b1*55; predict;
upper = b0 + b1*55 + t*SE;
lower = b0 + b1*55 - t*SE;
c(lower, upper) #same as the prediction function output
#Second, obatin 95% prediction Interval
#method 1: use functions in R
predict(m1, data.frame(x = 55), interval = "prediction")
#method 2: calculate step by step
b0 = m1$coefficients[[1]];b0
b1 = m1$coefficients[[2]];b1
y.hat = predict(m1, data.frame(x = x))
MSE = sum ((y - y.hat)^2)/(N-2);MSE #correspond with 121.4 in ANOVA
SE = sqrt(MSE)*sqrt(1 + 1/N + (mean(x)-55)^2/sum((x-mean(x))^2))
t = abs(qt(0.025, N-2))
predict =  b0 + b1*55; predict
upper = b0 + b1*55 + t*SE
lower = b0 + b1*55 - t*SE
c(lower, upper) #same as the prediction function output
N = 30; k = 4
SSTr = 64.42
SSE = 62.12
#Therefore:
MSTr = SSTr/(k-1); MSTr
MSE = SSE/(N-k); MSE
Ftest = MSTr/MSE; Ftest
p = pf(Ftest, k-1, N-k, lower.tail=F); p
N = 8; k = 3
SSTr = 224.184
SSE = 59.422
#Therefore:
MSTr = SSTr/(k-1); MSTr
MSE = SSE/(N-k); MSE
N = 9; k = 3
SSTr = 224.184
SSE = 59.422
#Therefore:
MSTr = SSTr/(k-1); MSTr
MSE = SSE/(N-k); MSE
Ftest = MSTr/MSE; Ftest
p = pf(Ftest, k-1, N-k, lower.tail=F); p
Ftest = MSTr/MSE; Ftest
(AB = 66.10 - 65.75
AC = 66.10 - 62.63
AD = 66.10 - 63.85
BC = 65.75 - 62.63
BD = 65.75 - 63.85
CD = 62.63 - 63.85)
(AB = 66.10 - 65.75)
(AC = 66.10 - 62.63)
(AD = 66.10 - 63.85)
(BC = 65.75 - 62.63)
(BD = 65.75 - 63.85)
(CD = 62.63 - 63.85)
```
1/(sqrt(2))*qtukey(0.99, k, df =  N-k)
(AB = 66.10 - 65.75)
(AC = 66.10 - 62.63)
(AD = 66.10 - 63.85)
(BC = 65.75 - 62.63)
(BD = 65.75 - 63.85)
(CD = 62.63 - 63.85)
#Tukey's Method:
1/(sqrt(2))*qtukey(0.99, k, df =  N-k)
1/(sqrt(2))*qtukey(0.99, k, df =  N-k)
k
k = 4
N
N = 30
1/(sqrt(2))*qtukey(0.99, k, df =  N-k)
(AB = 66.10 - 65.75)
(AC = 66.10 - 62.63)
(AD = 66.10 - 63.85)
(BC = 65.75 - 62.63)
(BD = 65.75 - 63.85)
(CD = 62.63 - 63.85)
#Tukey's Method:
1/(sqrt(2))*qtukey(0.99, k, df =  N-k)
#No difference between any of the two groups are larger than 4.47.
62.12/26
y1 = 66.10; y2 = 65.75; y3 = 62.63; y4 = 63.85;
n1 = 7; n2 = 8; n3 = 9; n4 = 6;
sigma = sqrt(62.12/26);
t_12 = (y1 - y2)/(sigma*sqrt(1/n1+1/n2))
t_13 = (y1 - y3)/(sigma*sqrt(1/n1+1/n3))
c(t_12, t_13, t_14, t_23, t_24, t_34)
t_12 = (y1 - y2)/(sigma*sqrt(1/n1+1/n2))
t_13 = (y1 - y3)/(sigma*sqrt(1/n1+1/n3))
t_14 = (y1 - y4)/(sigma*sqrt(1/n1+1/n4))
t_23 = (y2 - y3)/(sigma*sqrt(1/n2+1/n3))
t_24 = (y2 - y4)/(sigma*sqrt(1/n2+1/n4))
t_34 = (y3 - y4)/(sigma*sqrt(1/n3+1/n4))
c(t_12, t_13, t_14, t_23, t_24, t_34)
1/(sqrt(2))*qtukey(0.99, k, df =  N-k)
y1 = 66.10; y2 = 65.75; y3 = 62.63; y4 = 63.85;
n1 = 7; n2 = 8; n3 = 9; n4 = 6;
y.hat = 1/2*(y1+y2-y3-y4)
sd = 1/2*sqrt(sigma^2/n1 + sigma^2/n2 + sigma^2/n3 + sigma^2/n4)
t_value = (y.hat - 0)/sd
t_value
?pt
pt (t_value, N-k)
pt(1:5, df = 1)
MSTr = SSTr/(k-1); MSTr
MSE = SSE/(N-k); MSE
Ftest = MSTr/MSE; Ftest
p = pf(Ftest, k-1, N-k, lower.tail=F); p
y1 = 66.10; y2 = 65.75; y3 = 62.63; y4 = 63.85;
n1 = 7; n2 = 8; n3 = 9; n4 = 6;
sigma = sqrt(62.12/26);
t_12 = (y1 - y2)/(sigma*sqrt(1/n1 + 1/n2))
t_13 = (y1 - y3)/(sigma*sqrt(1/n1 + 1/n3))
t_14 = (y1 - y4)/(sigma*sqrt(1/n1 + 1/n4))
t_23 = (y2 - y3)/(sigma*sqrt(1/n2 + 1/n3))
t_24 = (y2 - y4)/(sigma*sqrt(1/n2 + 1/n4))
t_34 = (y3 - y4)/(sigma*sqrt(1/n3 + 1/n4))
c(t_12, t_13, t_14, t_23, t_24, t_34)
?pt
pt(t_value, N-k, lower.tail = F)
pt(t_value, N-k, lower.tail = F)*2
p_value = pt(t_test, N-k, lower.tail = F)*2; p_value
t_test = (y.hat - 0)/sd
#lower.tail = F refers P(X>x)
p_value = pt(t_test, N-k, lower.tail = F)*2; p_value
t_test = (y.hat - 0)/sd
t_test = (y.hat - 0)/sd; t_test
N-k
N = length(year); x = year; y = jump
year <- seq(from=-4, to = 92, by = 4);
year = year[-which (year == 16)];
year = year[-which (year == 40)];
year = year[-which (year == 44)];
year
jump <- c(249.75, 282.88, 289,    294.5,  299.25, 281.5,
293.13, 304.75, 300.75, 317.31, 308,    298,
308.25, 319.75, 317.75, 350.5,  324.5,  328.5,
336.25, 336.25, 343.25, 342.5)
plot(year, jump)
axis(side=3, at=c(year))
#Comments:
#1) The performance has a significant drop in the 20th, and the 48th contest.
#2) The performance of the 68th is higer than the rest of them (potential outlier)
N = length(year); x = year; y = jump
m1 = lm(y~x)
summary(m1)
par(mfrow=c(1:2))
plot(year, jump); abline(m1, col = "blue")
plot(m1$residuals); abline(h = 0, col = "red")
anova (m1)
anova (m1)
y1 = y[-c(1, which(year == 68))];
x1 = x[-c(1, which(year == 68))];
y1
length(y1)
length(y)
m2 = lm(y1~x1)
par(mfrow=c(1:2))
plot(x1, y1); abline(m2, col = "blue");
plot(m2$residuals, main = "Updated residual plot"); abline (h = 0, col = "red")
summary(m2)
summary(m1)
valence = read.csv(file = "valence_without_weekend.txt")
setwd("~/Documents/Courses/STAT682/Important")
setwd("~/Documents/Courses/STAT682/Important")
valence = read.csv(file = "valence_without_weekend.txt")
Pscore = valence$Pscore
Nscore = valence$Nscore
#---------------label-------------------------
label = read.csv(file = "label.txt")
#----------------------------------------------
data = cbind(Pscore, Nscore, label); head(data)
#---------------lag---------------------------
l = length(Pscore)
#Pscore lag-------------------------
Pscore1 = c(NA, Pscore[-l])
data1 = cbind(Pscore1,data); data1
label
SP = read.table(file = "SP500.txt", header = TRUE)
SP
label
l1 = length(label)
l1
l1 = size(label)
label
dim(label)
size(label)
size(label)[1, ]
size(label)[1]
dim(label)[1,]
dim(label)
dim(label)[1,1]
dim(label)[1,1]
dim(label)(1,1)
str(dim(label))
dim(label)(1)
dim(label)
dim(label)[1]
label1 = c(NA, label[-l1]);
label1
label[-l1]
label
Nscore4
Pscore
label = as.numeric(label)
str(label)
label[[1]]
label = label[[1]]
l1 = size(label)
label = label[[1]]
l1 = length(label)
l1
label
label = read.csv(file = "label.txt")
label
label = label[[1]]
label
l1 = length(label)
l1
label1 = c(NA, label[-l1]);
label1
label
label1 = c(NA, label[-l1]);
stock1 = cbind(label, label1);
stock1
label2 = c(NA, label1[-l1]);
stock2 = cbind (stock1, label2);
label3 = c(NA, label2[-l1]);
stock3 = cbind (stock2, label3);
label1 = c(NA, label[-l1]);
stock3
label1 = c(NA, label[-l1]);
stock1 = cbind(label, label1);
label4 = c(NA, label3[-l1]);
stock4 = cbind (stock3, label4);
label5 = c(NA, label4[-l1]);
stock5 = cbind (stock4, label5)
stock5
write.csv(file = "stock.csv", x = stock5[c(-1:-5), ], row.names = F)
corr(Pscore, Nscore)
cor(Pscore, Nscore)
data10
read.table (file = "dataset.csv")
read.table (file = "dataset.csv")
read.table (file = "dataset.csv")
x = read.table (file = "dataset.csv")
x = read.table (file = "dataset.csv")
data = cbind(Pscore, Nscore, label); head(data)
l = length(Pscore)
#Pscore lag-------------------------
Pscore1 = c(NA, Pscore[-l])
data1 = cbind(Pscore1,data); data1
Pscore2 = c(NA, Pscore1[-l])
data2 = cbind(Pscore2,data1); data2
Pscore3 = c(NA, Pscore2[-l])
data3 = cbind(Pscore3,data2); data3
Pscore4 = c(NA, Pscore3[-l])
data4 = cbind(Pscore4,data3); data4
Pscore5 = c(NA, Pscore4[-l])
data5 = cbind(Pscore5,data4); data5
#Nscore lag-------------------------
Nscore1 = c(NA, Nscore[-l])
data6 = cbind(Nscore1,data5); data6
Nscore2 = c(NA, Nscore1[-l])
data7 = cbind(Nscore2,data6); data7
Nscore3 = c(NA, Nscore2[-l])
data8 = cbind(Nscore3,data7); data8
Nscore4 = c(NA, Nscore3[-l])
data9 = cbind(Nscore4,data8); data9
Nscore5 = c(NA, Nscore4[-l])
data10 = cbind(Nscore5,data9); data10
#Generate table
write.csv(file = "dataset.csv", x = data10[c(-1:-5), ], row.names = F)
x = read.table (file = "dataset.csv")
x = read.csv(file = "dataset.csv")
x
write.csv(file = "dataset.csv", x = data10[c(-1:-5), ], row.names = F)
x = read.csv(file = "dataset.csv")
x
x[12, ]
x[, 12]
x[, 1:12]
corr(x[, 1:12])
cor(x[, 1:12])
x
diff (x$Nscore, lag = 1)
x$Nscore
dN = diff (x$Nscore, lag = 1); dN
dP = diff(x$Pscore, lag = 1); dP
0.9148073-0.9508197
dN = c(NA, diff (x$Nscore, lag = 1)); dN
dP = c(NA, diff(x$Pscore, lag = 1)); dP
cbind(dN, dP)
cbind(dN, dP)[-1]
cbind(dN, dP)[-1,]
write.csv(file = "diff.csv",  x = cbind(dN, dP)[-1,])
write.csv(file = "diff.csv",  x = cbind(dN, dP)[-1,], row.names = F)
stock5 = cbind (stock4, label5)
stock5
dN = c(NA, diff (x$Nscore, lag = 1)); dN
dP = c(NA, diff(x$Pscore, lag = 1)); dP
write.csv(file = "diff.csv",  x = cbind(dN, dP)[-1,], row.names = F)
write.csv(file = "diff.csv",  x = cbind(cbind(dN, dP)[-1,], Nsocre), row.names = F)
write.csv(file = "diff.csv",  x = cbind(cbind(dN, dP), Nsocre), row.names = F)
write.csv(file = "diff.csv",  x = cbind(cbind(dN, dP), Nscore), row.names = F)
write.csv(file = "diff.csv",  x = cbind(cbind(dN, dP)[-1], Nscore), row.names = F)
dN = c(NA, diff (x$Nscore, lag = 1)); dN
length(dN)
length(Nscore)
Nscore
Nscore == 586206896551724
N = Nscore([-1:-4])
N = Nscore[-1:-4]
N
N = Nscore[-1:-4]
P = Pscore[-1:-4]
dN = c(NA, diff (x$Nscore, lag = 1)); dN
dN = c(NA, diff (N, lag = 1)); dN
dN = c( diff (N, lag = 1)); dN
N = Nscore[-1:-4]
P = Pscore[-1:-4]
dN = c( diff (N, lag = 1)); dN
dP = c( diff(P, lag = 1)); dP
write.csv(file = "diff.csv",  x = cbind(cbind(dN, dP)[-1], Nscore), row.names = F)
write.csv(file = "diff.csv",  x = cbind(cbind(dN, dP), Nscore), row.names = F)
N = Nscore[-1:-4]
P = Pscore[-1:-4]
dN = c( diff (N, lag = 1)); dN
dP = c( diff(P, lag = 1)); dP
length(dN)
write.csv(file = "diff.csv",  x = cbind(cbind(dN, dP), x$Nscore), row.names = F)
write.csv(file = "stock.csv", x = stock5[c(-1:-5), ], row.names = F)
label6 = c(NA, label5[-l1]);
stock6 = cbind (stock5, label6)
#Generate table
write.csv(file = "stock.csv", x = stock5[c(-1:-5), ], row.names = F)
cor(x[, 1:12])
max(cor(x[, 1:12]))
order(cor(x[, 1:12]))
rank(cor(x[, 1:12]))
sort(cor(x[, 1:12]))
which(x == 0.473208462)
which(cor(x[, 1:12]) == 0.473208462)
which(cor(x[, 1:12]) == 0.473208462)
cor(x[, 1:12])
round(cor(x[, 1:12]),2)
